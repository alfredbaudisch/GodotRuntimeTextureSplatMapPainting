[gd_resource type="VisualShader" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeVectorFunc" id=18]
function = 1

[sub_resource type="VisualShaderNodeVectorInterp" id=4]

[sub_resource type="VisualShaderNodeTextureUniform" id=5]
uniform_name = "SplatMapTexture"
color_default = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=6]
uniform_name = "BaseColor"
color_default = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=7]
uniform_name = "DirtColor"
color_default = 1

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 3, 3, 3 ) ]
operator = 2

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D DirtColor : hint_black;
uniform sampler2D BaseColor : hint_black;
uniform sampler2D SplatMapTexture : hint_black;



void vertex() {
// Output:0

}

void fragment() {
// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// VectorOp:9
	vec3 n_in9p1 = vec3(3.00000, 3.00000, 3.00000);
	vec3 n_out9p0 = n_out8p0 * n_in9p1;

// TextureUniform:7
	vec3 n_out7p0;
	float n_out7p1;
	{
		vec4 n_tex_read = texture(DirtColor, n_out9p0.xy);
		n_out7p0 = n_tex_read.rgb;
		n_out7p1 = n_tex_read.a;
	}

// TextureUniform:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 n_tex_read = texture(BaseColor, n_out9p0.xy);
		n_out6p0 = n_tex_read.rgb;
		n_out6p1 = n_tex_read.a;
	}

// TextureUniform:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 n_tex_read = texture(SplatMapTexture, UV.xy);
		n_out5p0 = n_tex_read.rgb;
		n_out5p1 = n_tex_read.a;
	}

// VectorFunc:19
	vec3 n_out19p0 = max(min(n_out5p0, vec3(1.0)), vec3(0.0));

// VectorMix:4
	vec3 n_out4p0 = mix(n_out7p0, n_out6p0, n_out19p0);

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -546, -214 )
nodes/fragment/0/position = Vector2( 600, 140 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 320, 240 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( -80, 440 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -80, -80 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -80, 160 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -460, 80 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -460, 200 )
nodes/fragment/19/node = SubResource( 18 )
nodes/fragment/19/position = Vector2( 320, 380 )
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 0, 6, 0, 4, 1, 7, 0, 4, 0, 8, 0, 9, 0, 9, 0, 7, 0, 9, 0, 6, 0, 19, 0, 4, 2, 5, 0, 19, 0 )
